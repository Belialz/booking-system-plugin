name: Build and Release Extension

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths:
      - 'package.json'
  
  # Дополнительно для тестирования PR (без релиза)
  pull_request:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  # Джоб для проверки и тестирования (запускается для PR)
  test-build:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Test build
        run: npm run build

      - name: Check version format
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Version in package.json: $VERSION"
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          echo "✅ Version format is valid"

  # Основной джоб для релиза (только после мерджа в main)
  build-and-release:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: prod
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Determine version and release type
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            # Запущено по тегу (ручной релиз)
            VERSION=${GITHUB_REF#refs/tags/}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_type=manual" >> $GITHUB_OUTPUT
            echo "should_create_tag=false" >> $GITHUB_OUTPUT
            echo "Manual release triggered by tag: $VERSION"
          else
            # Запущено по пушу в main (авто-релиз)
            VERSION=v$(node -p "require('./package.json').version")
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "release_type=auto" >> $GITHUB_OUTPUT
            echo "should_create_tag=true" >> $GITHUB_OUTPUT
            echo "Auto release for version: $VERSION"
          fi

      - name: Check if auto-release should proceed
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_auto_release
        run: |
          if gh release view ${{ steps.version.outputs.version }} >/dev/null 2>&1; then
            echo "should_proceed=false" >> $GITHUB_OUTPUT
            echo "Release ${{ steps.version.outputs.version }} already exists, skipping auto-release"
          else
            echo "should_proceed=true" >> $GITHUB_OUTPUT
            echo "Proceeding with auto-release"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop if auto-release not needed
        if: |
          github.event_name == 'push' && 
          github.ref == 'refs/heads/main' && 
          steps.check_auto_release.outputs.should_proceed == 'false'
        run: exit 0

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "CRYPTO_SECRET_KEY=${{ secrets.CRYPTO_SECRET_KEY }}" >> .env
          echo "SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env

      - name: Build extension
        run: npm run build

      - name: Create zip archive
        run: |
          cd dist
          zip -r ../extension.zip *

      - name: Create tag for auto-release
        if: steps.version.outputs.should_create_tag == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}

      - name: Create or Update Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          files: extension.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}